<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/security"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		   http://www.springframework.org/schema/security
		   http://www.springframework.org/schema/security/spring-security.xsd">

  <!-- Enable support for pre-post authentication annotations -->
  <global-method-security pre-post-annotations="enabled"/>

  <!-- Main security configuration-->
  <http>
    <intercept-url access="hasRole('USER')" pattern="/app**"/>
    <intercept-url access="hasRole('USER')" pattern="/app/**"/>
    <intercept-url access="hasRole('USER')" pattern="/profile/**"/>
    <form-login authentication-failure-url="/login" default-target-url="/app"
      login-page="/login" username-parameter="email"/>
    <logout logout-success-url="/?message=logout_success"/>
  </http>

  <!-- Set up authentication manager -->
  <authentication-manager>
    <!-- Set up authentication provider -->
    <authentication-provider>
      <!-- Set up password encoder to store passwords in encrypted forms -->
      <password-encoder hash="bcrypt"/>
      <jdbc-user-service authorities-by-username-query="SELECT app_user.email, Role.name FROM app_user
                               JOIN app_user_Role ON app_user.id = app_user_Role.users_id JOIN Role
                               ON app_user_Role.roles_id = Role.id WHERE app_user.email = ?"
        data-source-ref="dataSource"
        users-by-username-query="SELECT email, password,1 FROM app_user WHERE email = ?"/>
    </authentication-provider>
  </authentication-manager>

</beans:beans>